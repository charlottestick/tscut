import { app, BrowserWindow, Menu, nativeImage, NativeImage } from 'electron';
import { ClippingDisplay } from './preload';
import { join } from 'path';
import iconUrl from './icons/jumpcut blue icon.ico';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export class Bezel {
  private bezel: BrowserWindow;
  shown: boolean = false;

  constructor() {
    let icon: NativeImage;
    if (app.isPackaged) {
      icon = nativeImage.createFromPath(
        join('resources/app/.webpack/main', iconUrl)
      );
    } else {
      icon = nativeImage.createFromPath('src/icons/jumpcut blue icon.ico');
    }

    // Create the browser window.
    // Frame false removes the toolbars and menus around the rendered web page
    this.bezel = new BrowserWindow({
      height: 800,
      width: 800,
      center: true,
      frame: false,
      transparent: true,
      skipTaskbar: true,
      show: false,
      icon,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });

    // and load the index.html of the app.
    this.bezel.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Menu won't be shown anyway because it's a frameless window,
    // but removing just in case as a default menu is created and might have some random hotkeys we don't want
    Menu.setApplicationMenu(null);
  }

  setText(clipping: ClippingDisplay) {
    this.bezel.webContents.send('showClipping', clipping);
  }

  hide(): void {
    // Minimize returns focus to the previous app before we gained focus,
    // this allows us to paste into whatever was focussed with our fake control-v
    this.bezel.minimize();
    // this.bezel.hide();
    this.shown = false;
  }

  show(): void {
    this.bezel.show();
    this.shown = true;
  }

  setKeyHandler(
    handler: (event: Electron.Event, input: Electron.Input) => void
  ): void {
    this.bezel.webContents.on('before-input-event', handler);
  }
}
